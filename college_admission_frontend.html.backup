<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>College Admission Agent - AI Assistant</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .app-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo i {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 2rem;
        }

        .logo h1 {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 1.5rem;
            font-weight: 700;
        }

        .powered-by {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #666;
            font-size: 0.9rem;
        }

        .ibm-badge {
            background: #1261FE;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.8rem;
        }

        .main-content {
            flex: 1;
            display: flex;
            max-width: 1200px;
            margin: 2rem auto;
            gap: 2rem;
            padding: 0 2rem;
            width: 100%;
        }

        .sidebar {
            width: 300px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            height: fit-content;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        }

        .quick-topics {
            margin-bottom: 2rem;
        }

        .quick-topics h3 {
            margin-bottom: 1rem;
            color: #333;
            font-size: 1.1rem;
        }

        .topic-btn {
            display: block;
            width: 100%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 16px;
            border-radius: 12px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: left;
            font-size: 0.9rem;
        }

        .topic-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(102, 126, 234, 0.3);
        }

        .chat-container {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            display: flex;
            flex-direction: column;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .chat-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 1.5rem 2rem;
            text-align: center;
        }

        .chat-header h2 {
            font-size: 1.3rem;
            margin-bottom: 0.5rem;
        }

        .chat-header p {
            opacity: 0.9;
            font-size: 0.95rem;
        }

        .chat-messages {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
            max-height: 500px;
            min-height: 400px;
        }

        .message {
            margin-bottom: 1.5rem;
            display: flex;
            gap: 12px;
            animation: fadeInUp 0.5s ease;
        }

        .message.user {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
            color: white;
            flex-shrink: 0;
        }

        .user .message-avatar {
            background: linear-gradient(135deg, #667eea, #764ba2);
        }

        .bot .message-avatar {
            background: linear-gradient(135deg, #4facfe, #00f2fe);
        }

        .message-content {
            background: #f8f9fa;
            padding: 1rem 1.5rem;
            border-radius: 18px;
            max-width: 70%;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            white-space: pre-wrap;
        }

        .user .message-content {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .typing-indicator {
            display: flex;
            gap: 4px;
            padding: 1rem 1.5rem;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #ccc;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }

        .chat-input-container {
            padding: 2rem;
            border-top: 1px solid #eee;
            background: white;
        }

        .chat-input-wrapper {
            display: flex;
            gap: 12px;
            align-items: flex-end;
        }

        .chat-input {
            flex: 1;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            padding: 12px 20px;
            font-size: 1rem;
            outline: none;
            transition: all 0.3s ease;
            resize: none;
            min-height: 50px;
            max-height: 120px;
        }

        .chat-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .send-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
        }

        .send-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 20px rgba(102, 126, 234, 0.3);
        }

        .send-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .welcome-message {
            text-align: center;
            color: #666;
            padding: 2rem;
        }

        .welcome-message i {
            font-size: 3rem;
            color: #667eea;
            margin-bottom: 1rem;
        }

        .error-message {
            background: #ffe6e6;
            color: #d63384;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            border-left: 4px solid #d63384;
        }

        .status-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            z-index: 1000;
        }

        .status-online {
            background: #d4edda;
            color: #155724;
        }

        .status-offline {
            background: #f8d7da;
            color: #721c24;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes typing {
            0%, 80%, 100% {
                transform: scale(0);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }

        @media (max-width: 768px) {
            .main-content {
                flex-direction: column;
                padding: 1rem;
            }

            .sidebar {
                width: 100%;
                order: 2;
            }

            .header-content {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef } = React;

        const CollegeAdmissionAgent = () => {
            const [messages, setMessages] = useState([]);
            const [inputValue, setInputValue] = useState('');
            const [isLoading, setIsLoading] = useState(false);
            const [isOnline, setIsOnline] = useState(true);
            const messagesEndRef = useRef(null);
            const inputRef = useRef(null);

            const quickTopics = [
                "Admission requirements",
                "Application deadlines",
                "Fee structure",
                "Course information",
                "Eligibility criteria",
                "Scholarship programs",
                "Document requirements",
                "Campus facilities"
            ];

            const scrollToBottom = () => {
                messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
            };

            useEffect(() => {
                scrollToBottom();
            }, [messages]);

            useEffect(() => {
                // Check backend health on component mount
                checkBackendHealth();
            }, []);

            const checkBackendHealth = async () => {
                try {
                    const response = await fetch('/api/health');
                    setIsOnline(response.ok);
                } catch (error) {
                    setIsOnline(false);
                }
            };

            const callBackendAPI = async (message) => {
                try {
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ message: message })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    return data.response;
                } catch (error) {
                    console.error('Error calling backend API:', error);
                    throw error;
                }
            };

            const handleSendMessage = async (message = inputValue) => {
                if (!message.trim()) return;

                const userMessage = {
                    id: Date.now(),
                    text: message,
                    sender: 'user',
                    timestamp: new Date()
                };

                setMessages(prev => [...prev, userMessage]);
                setInputValue('');
                setIsLoading(true);

                try {
                    // Call your Flask backend API
                    const response = await callBackendAPI(message);
                    
                    const botMessage = {
                        id: Date.now() + 1,
                        text: response,
                        sender: 'bot',
                        timestamp: new Date()
                    };

                    setMessages(prev => [...prev, botMessage]);
                    setIsOnline(true);
                } catch (error) {
                    console.error('Error:', error);
                    setIsOnline(false);
                    
                    const errorMessage = {
                        id: Date.now() + 1,
                        text: "I apologize, but I'm experiencing technical difficulties connecting to the IBM Granite AI model. Please try again later or contact our admissions office directly at admissions@college.edu or call (555) 123-4567.",
                        sender: 'bot',
                        timestamp: new Date()
                    };
                    setMessages(prev => [...prev, errorMessage]);
                }

                setIsLoading(false);
            };

            const handleKeyPress = (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSendMessage();
                }
            };

            const handleTopicClick = (topic) => {
                handleSendMessage(`Tell me about ${topic}`);
            };

            return (
                <div className="app-container">
                    <div className={`status-indicator ${isOnline ? 'status-online' : 'status-offline'}`}>
                        <i className={`fas ${isOnline ? 'fa-check-circle' : 'fa-exclamation-triangle'}`}></i>
                        {isOnline ? 'IBM Granite Online' : 'Connection Issues'}
                    </div>

                    <header className="header">
                        <div className="header-content">
                            <div className="logo">
                                <i className="fas fa-graduation-cap"></i>
                                <h1>College Admission Agent</h1>
                            </div>
                            <div className="powered-by">
                                <span>Powered by</span>
                                <div className="ibm-badge">IBM Granite</div>
                                <i className="fas fa-robot"></i>
                            </div>
                        </div>
                    </header>

                    <div className="main-content">
                        <aside className="sidebar">
                            <div className="quick-topics">
                                <h3><i className="fas fa-bolt"></i> Quick Topics</h3>
                                {quickTopics.map((topic, index) => (
                                    <button
                                        key={index}
                                        className="topic-btn"
                                        onClick={() => handleTopicClick(topic)}
                                        disabled={isLoading}
                                    >
                                        {topic}
                                    </button>
                                ))}
                            </div>

                            <div className="quick-topics">
                                <h3><i className="fas fa-info-circle"></i> Features</h3>
                                <div style={{color: '#666', fontSize: '0.9rem', lineHeight: '1.5'}}>
                                    • Real-time AI responses<br/>
                                    • Admission guidance<br/>
                                    • Course information<br/>
                                    • Fee & deadline details<br/>
                                    • 24/7 availability
                                </div>
                            </div>
                        </aside>

                        <main className="chat-container">
                            <div className="chat-header">
                                <h2><i className="fas fa-comments"></i> AI Assistant</h2>
                                <p>Get instant answers about admissions, courses, and more</p>
                            </div>

                            <div className="chat-messages">
                                {messages.length === 0 ? (
                                    <div className="welcome-message">
                                        <i className="fas fa-robot"></i>
                                        <h3>Welcome to College Admission Agent</h3>
                                        <p>I'm powered by IBM Granite AI to help you with:</p>
                                        <ul style={{textAlign: 'left', marginTop: '1rem', color: '#666'}}>
                                            <li>• Admission requirements and eligibility</li>
                                            <li>• Application processes and deadlines</li>
                                            <li>• Fee structures and financial aid</li>
                                            <li>• Course information and programs</li>
                                            <li>• Campus facilities and student life</li>
                                        </ul>
                                        <p style={{marginTop: '1rem'}}>Ask me anything!</p>
                                    </div>
                                ) : (
                                    messages.map((message) => (
                                        <div key={message.id} className={`message ${message.sender}`}>
                                            <div className="message-avatar">
                                                <i className={message.sender === 'user' ? 'fas fa-user' : 'fas fa-robot'}></i>
                                            </div>
                                            <div className="message-content">
                                                {message.text}
                                            </div>
                                        </div>
                                    ))
                                )}

                                {isLoading && (
                                    <div className="message bot">
                                        <div className="message-avatar">
                                            <i className="fas fa-robot"></i>
                                        </div>
                                        <div className="message-content">
                                            <div className="typing-indicator">
                                                <div className="typing-dot"></div>
                                                <div className="typing-dot"></div>
                                                <div className="typing-dot"></div>
                                            </div>
                                        </div>
                                    </div>
                                )}
                                <div ref={messagesEndRef} />
                            </div>

                            <div className="chat-input-container">
                                <div className="chat-input-wrapper">
                                    <textarea
                                        ref={inputRef}
                                        className="chat-input"
                                        placeholder="Ask about admissions, courses, fees, deadlines..."
                                        value={inputValue}
                                        onChange={(e) => setInputValue(e.target.value)}
                                        onKeyPress={handleKeyPress}
                                        disabled={isLoading}
                                    />
                                    <button
                                        className="send-btn"
                                        onClick={() => handleSendMessage()}
                                        disabled={isLoading || !inputValue.trim()}
                                    >
                                        <i className="fas fa-paper-plane"></i>
                                    </button>
                                </div>
                            </div>
                        </main>
                    </div>
                </div>
            );
        };

        ReactDOM.render(<CollegeAdmissionAgent />, document.getElementById('root'));
    </script>
</body>
</html>